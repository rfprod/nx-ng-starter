import { Injectable, InjectionToken, Provider } from '@angular/core';
import { ActionReducer, createReducer, on } from '@ngrx/store';

import { <%= fileName %>Actions } from './<%= fileName %>.actions';
import { featureName, I<%= className %>StateModel } from './<%= fileName %>.interface';

@Injectable({
  providedIn: 'root',
})
export class App<%= className %>Reducer {
  public static readonly initialState: I<%= className %>StateModel = {
    <%= fileName %>: false,
  };

  public static readonly token = new InjectionToken<ActionReducer<I<%= className %>StateModel>>(`${featureName} reducer`);

  public static readonly provider: Provider = {
    provide: App<%= className %>Reducer.token,
    deps: [App<%= className %>Reducer],
    useFactory: (reducer: App<%= className %>Reducer) => reducer.createReducer(),
  };

  public createReducer() {
    return createReducer(
      App<%= className %>Reducer.initialState,
      on(<%= fileName %>Actions.toggle, state => ({ <%= fileName %>: !state.<%= fileName %> })),
    );
  }
}
